--------------------------------------------------------
https://python-ning.github.io/2015/12/23/python_django_models/
--------------------------------------------------------

django(三)models模型层


字段类型
模型中的每个字段都是 Field 子类的某个实例。Django 根据字段类的类型确定以下信息：
数据库当中的列类型 (比如: INTEGER, VARCHAR)。
渲染表单时使用的默认HTML 部件（例如，<\input type=”text”><\select>）。
最低限度的验证需求，它被用在 Django 管理站点和自动生成的表单中。
Django 自带数十种内置的字段类型；如果内置类型仍不能满足你的要求，你可以自由地编写符合你要求的字段类型，这里介绍一些常用的字段类型：

--------------------------------------------------------
BooleanField 布尔字段
CharField 字符串字段
TimeField 时间字段
DateField 日期字段
DateTimeField 日期时间字段
EmailField 邮件字段
FileField 文件字段
ImageField 图片字段
IntegerField 整数字段
TextField 文本字段
URLField URL路径字段
ForeignKey 外键字段
OneToOneField 一对一关系字段
ManyToManyField 多对多关系字段
OneToManyField 一对多关系字段
--------------------------------------------------------


字段选项
每个字段有一些特有的参数，例如，CharField（和它的派生类）需要max_length 参数来指定VARCHAR数据库字段的大小。
还有一些适用于所有字段的通用参数。 这些参数在参考中有详细定义，这里我们只简单介绍一些最常用的：

===========
null

如果为True，Django 将用NULL 来在数据库中存储空值。 默认值是 False.
===========
blank
如果为True，该字段允许不填。默认为False。

要注意，这与 null 不同。null纯粹是数据库范畴的，而 blank 是数据验证范畴的。如果一个字段的blank=True，表单的验证将允许该字段是空值。如果字段的blank=False，该字段就是必填的。
===========
choices
由`二元组`组成的一个可迭代对象（例如，列表或元组），用来给字段提供`选择项`。 
如果设置了`choices` ，默认的表单将是一个`选择框`而不是标准的`文本框`，而且这个`选择框`的选项就是`choices` 中的`选项`。

这是一个关于 choices 列表的例子：
-------------------------
YEAR_IN_SCHOOL_CHOICES = (
    ('FR', 'Freshman'),
    ('SO', 'Sophomore'),
    ('JR', 'Junior'),
    ('SR', 'Senior'),
    ('GR', 'Graduate'),
)
-------------------------

每个元组中的第一个元素，是存储在数据库中的值；
第二个元素是在`管理界面`或 `ModelChoiceField` 中用作`显示`的内容。
 在一个给定的 `model 类`的实例中，想得到某个 `choices `字段的`显示值`，就调用 `get_FOO_display` 法(这里的 `FOO` 就是 `choices` 字段的名称 )。例如：
-------------------------
# models.py
from django.db import models

class Person(models.Model):
    SHIRT_SIZES = (
        ('S', 'Small'),
        ('M', 'Medium'),
        ('L', 'Large'),
    )
    name = models.CharField(max_length=60)
    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)

>>> p = Person(name="Fred Flintstone", shirt_size="L")
>>> p.save()
>>> p.shirt_size
'L'
>>> p.get_shirt_size_display()
'Large'
-------------------------
===========
default

字段的默认值。可以是一个值或者可调用对象。如果可调用 ，每有新对象被创建它都会被调用。
===========
help_text

表单部件额外显示的帮助内容。即使字段不在表单中使用，它对生成文档也很有用。
===========
primary_key

如果为`True`，那么这个`字段`就是模型的`主键`。
如果你没有指定任何一个`字段`的`primary_key=True`，Django 就会`自动`添加一个`IntegerField` `字段`做为`主键`，所以`除非`你想`覆盖`默认的主键行为，否则没必要设置任何一个字段的`primary_key=True`。详见自增主键字段。

主键字段是`只读的`。如果你在一个`已存在`的`对象`上面`更改主键的值`并且`保存`，一个`新`的对象将会在原有对象之外`创建`出来。例如：
-------------------------
# models.py
from django.db import models

class Fruit(models.Model):
    name = models.CharField(max_length=100, primary_key=True)

>>> fruit = Fruit.objects.create(name='Apple')
>>> fruit.name = 'Pear'
>>> fruit.save()
>>> Fruit.objects.values_list('name', flat=True)
['Apple', 'Pear']
-------------------------
===========
unique

如果该值设置为True, 这个数据字段的值在整张表中必须是唯一的
再说一次，这些仅仅是常用字段的简短介绍， 要了解详细内容,请查看django官方文档。
===========
自增主键字段

默认情况下，Django 会给每个模型添加下面这个字段：
----------------
id = models.AutoField(primary_key=True)
-------------------
这是一个自增主键字段。
如果你想指定一个`自定义``主键字段`，只要在某个字段上指定 `primary_key=True` 即可。
如果 Django 看到你显式地设置了 `Field.primary_key`，就`不会`自动添加 id 列。
每个模型只能有一个字段指定`primary_key=True`（无论是显式声明还是自动添加）。
===========
字段的自述名

除`ForeignKey`、`ManyToManyField` 和 `OneToOneField` 之外，每个字段类型都接受一个`可选的`位置参数 —— `字段`的`自述名`。
如果没有给定`自述名`，Django 将根据`字段`的`属性名称`自动创建`自述名` —— 将`属性名称`的`下划线`替换成`空格`。
在这个例子中，自述名是 “person’s first name“：
----------------------------
first_name = models.CharField("person's first name", max_length=30)
----------------------------

在这个例子中，自述名是 “first name“：
----------------------------
first_name = models.CharField(max_length=30)
----------------------------

`ForeignKey`、`ManyToManyField` 和 `OneToOneField`都要求第一个参数是一个`模型类`，所以要使用 `verbose_name` 关键字参数才能指定`自述名`：
----------------------------
poll = models.ForeignKey(Poll, verbose_name="the related poll")
sites = models.ManyToManyField(Site, verbose_name="list of sites")
place = models.OneToOneField(Place, verbose_name="related place")
----------------------------
习惯上，`verbose_name` 的`首字母`不用`大写`。Django 在必要的时候会`自动``大写``首字母`。
===========
关系

显然，`关系数据库`的威力体现在表之间的相互关联。 
Django 提供了三种最常见的数据库关系：多对一(many-to-one)，多对多(many-to-many)，一对一(one-to-one)。
===========
多对一关系

Django 使用 `django.db.models.ForeignKey` 定义`多对一`关系。
和使用其它字段类型一样：在模型当中把它做为一个`类`属性包含进来。

`ForeignKey` 需要一个位置参数：与该模型关联的`类`。
比如，一辆Car(汽车)有一个Manufacturer(制造商) —— 但是一个Manufacturer(制造商) 生产很多Car(汽车)，每一辆Car(汽车) 只能有一个Manufacturer(制造商) —— 使用下面的定义：
----------------------------
# models.py
from django.db import models

class Manufacturer(models.Model):
    # ...
    pass

class Car(models.Model):
    manufacturer = models.ForeignKey(Manufacturer)
    # ...
----------------------------

你还可以创建递归的关联关系（`对象`和`自己`进行多对一关联）和 `与尚未定义`的`模型`的关联关系.
建议你用被关联的模型的`小写`名称做为`ForeignKey` 字段的名字（例如，上面`manufacturer`）。当然，你也可以起别的名字。例如：
----------------------------
class Car(models.Model):
company_that_makes_it = models.ForeignKey(Manufacturer)

# ...
----------------------------
另见
`ForeignKey` 字段还接受许多别的参数，在模型字段参考有详细介绍。
这些选项帮助定义关联关系应该如何工作；它们都是可选的参数。
===========
多对多关系

ManyToManyField 用来定义`多对多`关系，用法和其他Field 字段类型一样：在模型中做为一个类属性包含进来。
ManyToManyField 需要一个位置参数：和该模型关联的`类`。

例如，一个Pizza(披萨)可以有多种Topping(馅料) —— 一种Topping(馅料) 可以位于多个Pizza(披萨)上，而且每个Pizza(披萨) 也可以有多种Topping(馅料) —— 如下展示：
----------------------------
# models.py
from django.db import models

class Topping(models.Model):
    # ...
    pass

class Pizza(models.Model):
    # ...
    toppings = models.ManyToManyField(Topping)
----------------------------
和使用`ForeignKey` 一样，你也可以创建`递归的`关联关系（对象与自己的多对多关联）和与尚未定义关系的模型的关联关系。

建议你以`被关联``模型名称`的`复数`形式做为`ManyToManyField` 的名字（例如上例中的toppings）。
在哪个模型中设置 `ManyToManyField` 并不重要，在两个模型中`任选`一个即可 —— `不要`两个模型都设置。
通常，`ManyToManyField` `实例`应该位于可以`编辑`的表单中。
在上面的例子中，`toppings(馅料)` 位于`Pizza(披萨)` 中（而不是在 `Topping` 里面设置`pizzas` 的 `ManyToManyField` 字段），
因为设想一个`Pizza` 有多种`Topping` 比一个`Topping` 位于多个`Pizza` 上要`更加``自然`。
按照上面的方式，在`Pizza` 的`表单`中将允许`用户`选择不同的`Toppings`。

另见
完整的示例参见多对多关系模型示例。
ManyToManyField 字段还接受别的参数,这些选项帮助定义关系应该如何工作；它们都是可选的。
==================
一对一关系

`OneToOneField`用来定义一对一关系。 用法和其他字段类型一样：在模型里面做为类属性包含进来。

当某个对象想扩展自另一个对象时，最常用的方式就是在这个对象的主键上添加一对一关系。

OneToOneField要一个位置参数：与模型关联的类。

例如，你想建一个“places” 数据库，里面有一些常用的字段，比如address、 phone number 等等。
 接下来，如果你想在Place 数据库的基础上建立一个Restaurant 数据库，而不想将已有的字段复制到Restaurant模型，
那你可以在 `Restaurant` 添加一个`OneToOneField` 字段，这个字段指向`Place`
（因为`Restaurant` 本身就是一个`Place`；事实上，在处理这个问题的时候，你应该使用一个典型的 `继承`，它`隐含`一个`一对一`关系)。

OneToOneField字段也接受一个特定的可选的parent_link参数。
在以前的版本中，OneToOneField 字段会自动变成模型 的主键。不过现在已经不这么做了(不过要是你愿意的话，你仍可以传递 primary_key参数来创建主键字段)。所以一个 模型 中可以有多个OneToOneField 字段。
==================
===================
元选项

使用内部的`class Meta` 定义模型的`元数据`，例如：
--------------------------------------------
from django.db import models

class Ox(models.Model):
    horn_length = models.IntegerField()

    class Meta:
        ordering = ["horn_length"]
        verbose_name_plural = "oxen"
--------------------------------------------
`模型``元数据`是“任何不是字段的数据”，比如`排序选项`（ordering），`数据表名`（db_table）或者人类可读的`单复数名称`（verbose_name 和verbose_name_plural）。
在模型中添加`class Meta`是完全可选的，所有选项都`不是``必须的`。

所有`元选项`的完整列表可以在模型选项参考找到。
===================
模型的属性

objects
模型最重要的属性是`Manager`。
它是Django 模型进行`数据库`查询操作的`接口`，并用于从`数据库`获取`实例`。
如果没有自定义`Manager`，则默认的名称为`objects`。`Managers` 只能通过`模型类`访问，而不能通过`模型实例`访问。
===================
模型的方法

可以在模型上定义`自定义`的`方法`来给你的`对象`添加`自定义`的“底层”功能。`Manager` 方法用于“表范围”的事务，`模型`的`方法`应该着眼于`特定的`模型`实例`。

这是一个非常有价值的技术，让`业务逻辑`位于`同一个地方` —— `模型中`。
例如，下面的模型具有一些自定义的方法：
--------------------------
from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    birth_date = models.DateField()

    def baby_boomer_status(self):
        "Returns the person's baby-boomer status."
        import datetime
        if self.birth_date < datetime.date(1945, 8, 1):
            return "Pre-boomer"
        elif self.birth_date < datetime.date(1965, 1, 1):
            return "Baby boomer"
        else:
            return "Post-boomer"

    def _get_full_name(self):
        "Returns the person's full name."
        return '%s %s' % (self.first_name, self.last_name)
    full_name = property(_get_full_name)
--------------------------

这个例子中的最后一个方法是一个`property`。

模型实例参考 具有一个完整的为模型自动生成的方法 列表。你可以覆盖它们 —— 参见下文覆盖模型预定义的方法 —— 但是有些方法你会始终想要重新定义：
--------------------------
__str__() (Python 3)
    Python 3 equivalent of __unicode__().
__unicode__() (Python 2)
--------------------------
一个Python的特殊方法（magic method)，返回对象的字符串表达式(unicode格式）当模型实例需要强制转换并显示为普通的字符串时，Python 和Django 将使用这个方法。
最明显是在`交互式控制台`或者`管理站点`显示一个对象的时候。

你将永远想要定义这个方法；默认的方法几乎没有意义。

get_absolute_url()
它告诉Django 如何计算一个对象的URL。Django 在它的管理站点中使用到这个方法，在其它任何需要计算一个对象的URL 时也将用到。

任何具有唯一标识自己的URL 的对象都应该定义这个方法。

=================
覆盖预定义的模型方法¶

还有另外一部分`封装`数据库行为的`模型方法`，你可能想要`自定义`它们。特别是，你将要经常改变`save()` 和`delete()` 的工作方式。

你可以自由`覆盖`这些方法（和其它任何模型方法）来改变它们的行为。

`覆盖`内建模型`方法`的一个典型的使用场景是，你想在`保存`一个对象时做一些其它事情。例如（参见save() 中关于它接受的参数的文档）：
--------------------------
from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def save(self, *args, **kwargs):
        do_something()
        super(Blog, self).save(*args, **kwargs) # Call the "real" save() method.
        do_something_else()
--------------------------
你还可以阻止保存：
--------------------------
from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def save(self, *args, **kwargs):
        if self.name == "Yoko Ono's blog":
            return # Yoko shall never have her own blog!
        else:
            super(Blog, self).save(*args, **kwargs) # Call the "real" save() method.
--------------------------

必须要记住调用超类的方法—— super(Blog, self).save(args, *kwargs) —— 来确保对象被保存到数据库中。
如果你忘记调用超类的这个方法，默认的行为将不会发生且数据库不会有任何改变。

还要记住传递参数给这个模型方法 —— 即args, **kwargs。 Django 未来将一直会扩展内建模型方法的功能并添加新的参数。
如果在你的方法定义中使用args, **kwargs，将保证你的代码自动支持这些新的参数。
=========================
注意，当使用`查询集`批量`删除`对象时，将不会为每个对象调用`delete()` 方法。为确保自定义的`删除`逻辑得到执行，你可以使用`pre_delete` 和/或`post_delete` `信号`。

不幸的是，当批量`creating` 或`updating` 对象时`没有`变通方法，因为不会调用`save()`、`pre_save`和 `post_save`。


