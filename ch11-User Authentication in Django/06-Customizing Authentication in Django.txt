=======================================
Customizing Authentication in Django
在Django中定制身份验证
=======================================
The authentication that comes with Django is good enough for most common cases, but you may have needs not met by the out-of-the-box defaults. To customize authentication to your projects needs involves understanding what points of the provided system are extensible or replaceable.
Django附带的`认证`对于大多数常见情况来说已经足够了，但`开箱即用`的`默认设置`无法满足你的需求。
要为您的项目`定制``身份验证`，需要了解提供的系统的哪些点`可扩展`或`可替换`。

Authentication backends provide an extensible system for when a username and password stored with the User model need to be authenticated against a different service than Django’s default. You can give your models custom permissions that can be checked through Django’s authorization system. You can extend the default User model, or substitute a completely customized model.
`身份验证后端`,为`用户``模型`存储的`用户名`和`密码`需要针对与Django默认不同的服务进行`身份验证`时提供了一个`可扩展`的系统。
您可以给您的`模型``定制`权限`，其可以被Django的`授权系统`来`检查`。
您可以`扩展`默认的`用户模型`，或者`替换`一个`完全的自定义的`模型`。

======================================
Other Authentication Sources
其他验证来源

There may be times you have the need to hook into another authentication source – that is, another source of usernames and passwords or authentication methods.
您可能有时需要`挂接`到另一个`身份验证``来源` - 也就是`另一个``用户名`和`密码`的`来源`或`身份验证方法`。

For example, your company may already have an LDAP setup that stores a username and password for every employee. It’d be a hassle for both the network administrator and the users themselves if users had separate accounts in LDAP and the Django-based applications.
例如，您的公司可能已经有一个`LDAP`设置，为每个员工存储一个`用户名`和`密码`。如果`用户`在`LDAP`和基于`Django`的`应用程序`中，有`单独的``帐户`，那么对于`网络管理员`和`用户`本身来说都是一件麻烦事。

So, to handle situations like this, the Django authentication system lets you plug in other authentication sources. You can override Django’s default database-based scheme, or you can use the default system in tandem with other systems.
所以，为了处理这样的情况，`Django认证系统`可以让你`插入`其他`认证源`。
您可以重写`Django`的`默认``基于数据库`的方案，或者可以与`其他系统`一起使用`默认系统`。
======================================

======================================
Specifying Authentication Backends
指定认证后端

Behind the scenes, Django maintains a list of authentication backends that it checks for authentication. When somebody calls authenticate() – as described in the previous section on logging a user in – Django tries authenticating across all of its authentication backends. If the first authentication method fails,
Django tries the second one, and so on, until all backends have been attempted.
在`幕后`，Django维护一个`验证后端`的`列表`，它`检查``身份验证`。
当有人调用`authenticate（）`时（正如前一节中介绍的有关`登录用户`的内容），Django会尝试在其所有`身份验证后端`进行`身份验证`。如果`第一种``认证方法`失败，Django会尝试`第二个`，等等，直到所有的`后端`被尝试。

The list of authentication backends to use is specified in the AUTHENTICATION_BACKENDS setting. This should be a list of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path. By default, AUTHENTICATION_BACKENDS
is set to:

在`AUTHENTICATION_BACKENDS`设置中,指定要使用的`身份验证后端``列表`。
这应该是一个Python`路径名``列表`，指向知道如何进行身份验证的`Python类`。
这些类可以在你的Python路径上的任何地方。
默认情况下，`AUTHENTICATION_BACKENDS` 被设定为：
-------------------
['django.contrib.auth.backends.ModelBackend']
-------------------
That’s the basic authentication backend that checks the Django users database and queries the built-in permissions. It does not provide protection against brute force attacks via any rate limiting mechanism. You may either implement your own rate limiting mechanism in a custom authorization backend, or use the mechanisms provided by most Web servers. The order of AUTHENTICATION_BACKENDS matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match. If a backend raises a PermissionDenied exception, authentication will immediately fail. Django won’t check the backends that follow.
这是检查`Django``用户数据库`并查询`内置权限`的`基本身份验证后端`。
它不提供通过任何`速率限制机制`防止`暴力攻击`的保护。
您可以在`自定义授权后端`中实现您自己的`速率限制机制`，也可以使用大多数`Web服务器`提供的`机制`。 
`AUTHENTICATION_BACKENDS`的`顺序`很重要，所以如果`相同`的`用户名`和`密码`在`多个后端`有效，Django将在`第一次`正面匹配时`停止`处理。
如果后端引发`PermissionDenied`异常，`认证`将`立即``失败`。 
Django不会检查`后面`的`后端`。

Once a user has authenticated, Django stores which backend was used to authenticate the user in the user’s session, and re-uses the same backend for the duration of that session whenever access to the currently authenticated user is needed. This effectively means that authentication sources are cached on a per-session basis, so if you change AUTHENTICATION_BACKENDS, you’ll need to clear out session data if you need to force users to re-authenticate using different methods. A simple way to do that is simply to execute Session.objects.all().delete().
一旦一个`用户`通过`身份验证`，Django就会存储哪些`后端`用于在`用户`的`会话`中对`用户`进行`身份验证`，并在该`会话`期间，每当需要`访问`当前被身份验证的`用户`时,都会`重用`这个相同的`后端`。
这实际上意味着每个`会话`都会`缓存``身份验证源`，因此如果您更改`AUTHENTICATION_BACKENDS`，则需要`清除``会话数据`（如果需要`强制`用户使用`不同方法``重新`进行`身份验证`）。
一个简单的方法就是执行`Session.objects.all().delete()`.

======================================
Writing an Authentication Backend
编写一个`身份验证后端`

An authentication backend is a class that implements two required methods: get_user(user_id) and authenticate(**credentials), as well as a set of optional permission related authorization methods. The get_user method takes a user_id – which could be a username, database ID or whatever, but has to be the primary key of your User object – and returns a User object. The authenticate method takes credentials as keyword arguments. Most of the time, it’ll just look like this:
一个`认证后端`是一个`类`，其实现两个必需的`方法`：`get_user（user_id）`和`authenticate（** credentials）`，以及一组`可选`的`权限`相关`授权方法`。 
`get_user`方法,需要一个`user_id` - 以是一个`用户名`，`数据库ID`或`其他`，但必须是你的`用户`对象的`主键`，并返回一个`用户``对象`。
`authenticate`方法,将`凭据`作为`关键字`参数。
大多数情况下，它看起来像这样：
-----------------------------------
class MyBackend(object):
    def authenticate(self, username=None, password=None):
        # Check the username/password and return a User.
        ...
-----------------------------------
But it could also authenticate a token, like so:
它也可以`验证`一个`令牌`，如下所示：
-----------------------------------
class MyBackend(object):
    def authenticate(self, token=None):
        # Check the token and return a User.
        ...
-----------------------------------
Either way, authenticate should check the credentials it gets, and it should return a User object that matches those credentials, if the credentials are valid. If they’re not valid, it should return None.
The Django admin system is tightly coupled to the Django User object described at the beginning of this chapter.
无论哪种方式，`authenticate`应该`检查`它获取的`凭据`，并且如果`凭据`有效，它应该返回与这些`凭证`相匹配的一个`用户对象`。如果它们`无效`，则应返回`None`。
Django`后台管理系统`与本章开头描述的`Django User object`紧密耦合。

For now, the best way to deal with this is to create a Django User object for each user that exists for your backend (e.g., in your LDAP directory, your external SQL database, etc.) You can either write a script to do this in advance, or your authenticate method can do it the first time a user logs in.
现在，处理这个问题的最好方法是,为每个存在于`后端`的`用户`，创建一个`Django` `User对象`（例如，在您的LDAP目录，外部SQL数据库等中）。
您可以编写一个`脚本`来执行此操作或者您的`authenticate`,可以在一个用户`首次登录`时`执行``此操作`。

Here’s an example backend that authenticates against a username and password variable defined in your settings.py file and creates a Django User object the first time a user authenticates:
以下是一个示例`后端`，它会根据`settings.py`文件中定义的一个`用户名`和`密码变量`进行`身份验证`，并在用户`首次`进行`身份验证`时创建一个`Django``用户对象`（`User object`）：
-----------------------------------
from django.conf import settings
from django.contrib.auth.models import User, check_password

class SettingsBackend(object):
    """
    Authenticate against the settings ADMIN_LOGIN and ADMIN_PASSWORD.

    Use the login name, and a hash of the password. For example:

    ADMIN_LOGIN = 'admin'
    ADMIN_PASSWORD = 'sha1$4e987$afbcf42e21bd417fb71db8c66b321e9fc33051de'
    """

    def authenticate(self, username=None, password=None):
        login_valid = (settings.ADMIN_LOGIN == username)
        pwd_valid = check_password(password, settings.ADMIN_PASSWORD)
        if login_valid and pwd_valid:
            try:
                user = User.objects.get(username=username)
            except User.DoesNotExist:
                # Create a new user. Note that we can set password
                # to anything, because it won't be checked; the password
                # from settings.py will.
                user = User(username=username, password='password')
                user.is_staff = True
                user.is_superuser = True
                user.save()
            return user
        return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None 
-----------------------------------
======================================
Handling Authorization in Custom Backends
在自定义后端中，处理授权

Custom authorization backends can provide their own permissions. The user model will delegate permission lookup functions (get_group_permissions(), get_all_permissions(), has_perm(), and has_module_perms()) to any authentication backend that implements these functions. The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants.
`自定义授权后端`可以提供他们自己的`权限`。
`用户模型`会将`权限`查找函数（get_group_permissions（），get_all_permissions（），has_perm（）和has_module_perms（））`委托`给实现这些函数的`任何验证后端`。
赋予用户的`权限`将是所有`后端`返回的`所有权限`的`超集`。
也就是说，Django向任何一个`后端`授予的一个`用户`授予一个权限。--不太理解！！！

If a backend raises a PermissionDenied exception in has_perm() or has_module_perms(), the authorization will immediately fail and Django won’t check the backends that follow. The simple backend above could implement permissions for the admin fairly simply:
如果一个`后端`在`has_perm（）`或`has_module_perms（）`中引发一个`PermissionDenied`异常，`授权`将立即`失败`，Django将`不检查``后面`的`后端`。
上面的`简单后端`可以简单地为`管理员`实现`权限`：
-----------------------------
class SettingsBackend(object):
    ...
    def has_perm(self, user_obj, perm, obj=None):
        if user_obj.username == settings.ADMIN_LOGIN:
            return True
        else:
            return False 
-----------------------------
This gives full permissions to the user granted access in the above example. 
Notice that in addition to the same arguments given to the associated User functions, the backend authorization functions all take the user object, which may be an anonymous user, as an argument.
这给上面例子中`授予`访问权限的`用户`提供了`完全`的`权限`。
请注意，除了给予相关`用户函数`的相同参数之外，`后端授权`函数，都将`用户对象`（可能是一个`匿名`的`用户`）作为参数。

A full authorization implementation can be found in the ModelBackend class in django/contrib/auth/backends.py, which is the default backend and it queries the auth_permission table most of the time. If you wish to provide custom behavior for only part of the backend API, you can take advantage of Python inheritance and subclass ModelBackend instead of implementing the complete API in a custom backend.
一个完整的`授权实现`可以在`django/contrib/auth/backends.py`中的`ModelBackend类`中找到，它是`默认`的`后端`，它大部分时间都会查询`auth_permission表`。
如果您希望仅为`后端API`的一部分提供`自定义`行为，则可以利用`Python`继承和子类`ModelBackend`，而不是在`自定义后端`中实现`完整`的`API`。
======================================
Authorization for Anonymous Users
`匿名用户`的`授权`

An anonymous user is one that is not authenticated i.e. they have provided no valid authentication details. However, that does not necessarily mean they are not authorized to do anything. At the most basic level, most Web sites authorize anonymous users to browse most of the site, and many allow anonymous posting of comments etc.

Django’s permission framework does not have a place to store permissions for anonymous users. However, the user object passed to an authentication backend may be an django.contrib.auth.models.AnonymousUser object, allowing the backend to specify custom authorization behavior for anonymous users.

一个`匿名用户`是一个`未`经过`身份验证`的`用户`，即他们`未`提供有效的`身份验证``详细信息`。
但是，这并不一定意味着他们`无权`做`任何`事情。
在最基本的层面上，大多数网站授权匿名用户`浏览`大部分网站，并且许多网站允许匿名发布`评论`等。
Django的`权限框架`（`permission framework`）没有地方为`匿名用户`存储`权限`。
但是，传递给`身份验证后端`的`用户对象`可能是一个`django.contrib.auth.models.AnonymousUser`对象，允许`后端`为`匿名用户`指定`自定义`的`授权行为`。
======================================
Authorization for Inactive Users
对`非活动`用户的`授权`

An inactive user is a one that is authenticated but has its attribute is_active set to False.
However, this does not mean they are not authorized to do anything.
For example, they are allowed to activate their account.
一个`非活动``用户`，是经过`身份验证`的`用户`，但其属性`is_active`设置为`False`。
但是，这并不意味着他们`无权`做任何事情。
例如，他们被允许`激活`(`activate`)他们的`帐户`。

The support for anonymous users in the permission system allows for a scenario where anonymous users have permissions to do something while inactive authenticated users do not. Do not forget to test for the is_active attribute of the user in your own backend permission methods.
对`权限系统`中的`匿名用户`的`支持`,允许`匿名用户`有权执行`某些`操作，而`不活动`的经过`身份验证`的用户则`不能`这样做。
不要忘记在你自己的`后端`的`权限方法`中`测试``用户`的`is_active`属性。
======================================
Handling Object Permissions
处理`对象权限`

Django’s permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return False or an empty list (depending on the check performed). An authentication backend will receive the keyword parameters obj and user_obj for each object related authorization method and can return the object level permission as appropriate.
Django的`权限框架`为`对象权限`奠定了一个基础，但`核心`中没有`实现`它。
这意味着`检查``对象权限`将始终返回`False` 或 一个空的`列表`（取决于执行的`检查`）。
一个`身份验证后端`，将为每个对象相关的`授权方法`接收`关键字`参数:`obj`和`user_obj`，并可以根据需要,返回`对象级别权限`。
======================================
Custom Permissions
定制权限

To create custom permissions for a given model object, use the permissions model Meta attribute. This example Task model creates three custom permissions, i.e. actions users can or cannot do with Task instances, specific to your application:
要为一个给定的`模型对象`，创建`自定义权限`，请使用`权限模型``元属性`（`Meta attribute`）。
本示例`Task`模型,会创建`三个`自定义`权限`，即`用户`可以`使用`或不能`使用``Task实例`执行的操作，具体针对您的`应用程序`：
------------------------------
class Task(models.Model):
    ...
    class Meta:
        permissions = (
            ("view_task", "Can see available tasks"),
            ("change_task_status", "Can change the status of tasks"),
            ("close_task", "Can remove a task by setting its status as   
              closed"),
        )
------------------------------
The only thing this does is create those extra permissions when you run manage.py migrate. Your code is in charge of checking the value of these permissions when a user is trying to access the functionality provided by the application (viewing tasks, changing the status of tasks, closing tasks.) Continuing the above example, the following checks if a user may view tasks:

唯一要做的事情,是在运行`manage.py migrate`时,创建这些`额外`的`权限`。
当一个`用户`尝试访问`应用程序`提供的`功能`（`查看任务`，`更改任务状态`，`关闭任务`）时，您的`代码`负责`检查`这些`权限`的`值`。
继续上面的示例，以下示例将`检查`一个用户可能会`查看任务`：
--------------------
user.has_perm('app.view_task')
--------------------
=================================================
Extending The Existing User Model
扩展现有的用户模型

There are two ways to extend the default User model without substituting your own model. If the changes you need are purely behavioral, and don’t require any change to what is stored in the database, you can create a proxy model based on User. This allows for any of the features offered by proxy models including default ordering, custom managers, or custom model methods.
有`两种`方法可以`扩展``默认``用户模型`，而不用`替换`自己的`模型`。
如果您需要的更改是`纯粹`的`行为`，并且`不需要`对`存储`在`数据库`中的`内容`进行任何`更改`，则可以基于用户创建`代理`模型。
这允许`代理模型`提供的任何功能，包括`默认排序`，`自定义管理器`或自定义`模型方法`。

If you wish to store information related to User, you can use a one-to-one relationship to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user. For example, you might create an Employee model:
如果您希望`存储`与用户相关的`信息`，则可以使用包含`字段`的`模型`的`一对一关系`以获取更多信息。
这种`一对一模式`通常称为一个`配置文件模型`，因为它可能存储有关站点`用户`的`非auth`的相关`信息`。
例如，您可以创建一个`Employee模型`：
----------------------------
from django.contrib.auth.models import User

class Employee(models.Model):
    user = models.OneToOneField(User)
    department = models.CharField(max_length=100)
----------------------------
Assuming an existing Employee Fred Smith who has both a User and Employee model, you can access the related information using Django’s standard related model conventions:
假设一个现有的员工，`Fred Smith`拥有`User`和`Employee模型`，则可以使用Django的标准相关模型约定`访问`相关信息：
----------------------------
>>> u = User.objects.get(username='fsmith')
>>> freds_department = u.employee.department 
----------------------------
To add a profile model’s fields to the user page in the admin, define an InlineModelAdmin (for this example, we’ll use a StackedInline) in your app’s admin.py and add it to a UserAdmin class which is registered with the User class:
要将`配置文件模型`的`字段`添加到`admin``用户页面`，请在应用程序的`admin.py`中定义`InlineModelAdmin`（对于本示例，我们将使用`StackedInline`），并将其添加到`UserAdmin类`，该类用`User类`注册：

----------------------------
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User

from my_user_profile_app.models import Employee

# Define an inline admin descriptor for Employee model
# which acts a bit like a singleton
class EmployeeInline(admin.StackedInline):
    model = Employee
    can_delete = False
    verbose_name_plural = 'employee'

# Define a new User admin
class UserAdmin(UserAdmin):
    inlines = (EmployeeInline, )

# Re-register UserAdmin
admin.site.unregister(User)
admin.site.register(User, UserAdmin)
----------------------------
These profile models are not special in any way – they are just Django models that happen to have a one-to-one link with a User model. As such, they do not get auto created when a user is created, but a django.db.models.signals.post_save could be used to create or update related models as appropriate.
这些`配置模型`在任何方面都不是`特别的` - 它们只是恰好与`用户模型`具有`一对一`链接的`Django模型`。
因此，`创建用户`时`不会``自动创建`，但可以根据需要使用`django.db.models.signals.post_save`创建或更新相关`模型`。

Note that using related models results in additional queries or joins to retrieve the related data, and depending on your needs substituting the User model and adding the related fields may be your better option. However existing links to the default User model within your project’s apps may justify the extra database load.
请注意，使用相关模型会产生额外的`查询`或`连接`来检索相关数据，根据您的需要，`替换`用户模型并`添加`相关字段可能是您更好的选择。
但是，项目应用程序中`默认用户模型`的现有`链接`可能会导致`额外`的`数据库负载`。
=====================================================
Substituting A Custom User Model
替换一个`自定义`的`用户模型`

Some kinds of projects may have authentication requirements for which Django’s built-in User model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username. Django allows you to override the default User model by providing a value for the AUTH_USER_MODEL setting that references a custom model:
某些类型的项目可能具有`身份验证`要求，而Django的`内置``User模型`并不总是适合的。
例如，在一些`网站`上，使用`电子邮件地址`作为您的`身份``标记`而不是`用户名`更有意义。 
Django允许您通过为引用`自定义模型`的`AUTH_USER_MODEL`设置提供`值`来`覆盖``默认的用户模型`：
----------------------------------
`AUTH_USER_MODEL = 'books.MyUser'`
----------------------------------
This dotted pair describes the name of the Django app (which must be in your INSTALLED_APPS), and the name of the Django model that you wish to use as your User model.
此`虚线对`描述了`Django应用程序`的`名称`（它必须位于您的`INSTALLED_APPS`中），以及您希望用作`用户模型`的`Django模型`的名称。

Changing AUTH_USER_MODEL has a big effect on your Django project, particularly your database structure. For example, if you change your AUTH_USER_MODEL after you have run migrations, you will have to manually update your database because it affects the construction of many database table relationships. Unless there is a very good reason to do so, you should not change your AUTH_USER_MODEL.
改变`AUTH_USER_MODEL`对你的`Django项目`有很大的`影响`，特别是你的`数据库结构`。
例如，如果在运行`迁移`后更改`AUTH_USER_MODEL`，则必须`手动``更新数据库`，因为它会影响许多`数据库``表关系`的`构建`。
除非有足够的`理由`这样做，否则不应更改`AUTH_USER_MODEL`。

Notwithstanding the warning above, Django does fully support custom user models, however a full explanation is beyond the scope of this book. A full example of an admin-compliant custom user app, as well as comprehensive documentation on custom user models can be found on the Django Project website.
尽管有上述警告，但Django完全支持`自定义用户模型`，但完整的解释超出了本书的范围。 
`Django项目`网站上提供了一个完全符合`管理员`要求的`自定义用户应用程序`(`a custom user app`)示例，以及有关`自定义用户模型`的全面文档。
=====================================================
