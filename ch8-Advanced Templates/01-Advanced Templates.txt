===========================
### Advanced Templates
高级模板

Although most of your interactions with Django’s template language will be in the role of template author, you may want to customize and extend the template engine – either to make it do something it doesn’t already do, or to make your job easier in some other way.

This chapter delves deep into the guts of Django’s template system. It covers what you need to know if you plan to extend the system or if you’re just curious about how it works. It also covers the auto-escaping feature, a security measure you’ll no doubt notice over time as you continue to use Django.

虽然您与Django`模板语言`的大多数交互都将扮演`模板作者`的角色，但您可能想要定制和扩展模板引擎 - 或者让它做一些它还没有做的事情，或者让您的工作更轻松一些另一种方式。
本章深入探讨了Django模板系统的内涵。它涵盖了您需要了解的内容，如果您计划扩展系统或者您只是对其工作原理感到好奇。它还涵盖了`自动转义`功能，这是您在继续使用Django时无疑会注意到的安全措施。

===========================
### Template Language Review

First, let’s quickly review a number of terms introduced in Chapter 3:
首先，让我们快速回顾一下第3章中介绍的一些术语：
------------------------
++ A `template` is a text document, or a normal Python string, that is marked up using the Django template language. A template can contain template tags and variables.
++ 一个`模板`是一个`文本文档`，或者一个普通的`Python字符串`，使用Django模板语言进行标记的。一个模板可以包含`模板标签`和`变量`。

++ A `template tag` is a symbol within a template that does something. 
This definition is deliberately vague. 
For example, a template tag can produce content, serve as a control structure (an `if statement` or `for loop`), grab content from a database, or enable access to other template tags.
Template tags are surrounded by `{% and %}`:
++ 一个“模板标签”，是`模板中`的一个`符号`，用于执行某些操作。
这个定义有些含糊不清。
例如，`模板标签`可以生成`内容`，用作`控制结构`（`if语句`或`for循环`），从`数据库`中获取`内容`或者`启用`对其他`模板标签`的`访问`。
`模板标签`被“{％ and ％}”包围：
-------------
  {% if is_logged_in %}           
  Thanks for logging in!
  {% else %}           
  Please log in.
  {% endif %}
-------------

++ A `variable` is a symbol within a template that outputs a value.
Variable tags are surrounded by `{{ and }}`:
++ 一个“变量”，是一个符号，在一个模板中，可以输出一个`值`。
`变量标签`是被“{{ and }}”包围：
--------------
  My first name is {{ first_name }}. My last name is {{ last_name }}.
--------------

++ A `context` is a `name->value` mapping (similar to a Python dictionary) that is passed to a template.
++ 一个`context`，是一个传递给`模板`的`name-> value`映射（类似于Python`字典`）。

++ A template renders a context by replacing the variable “holes” with values from the context and executing all template tags.
++ 一个模板，渲染一个`context`,是通过将来自`context`中的值，去替换变量“holes”，已经执行所有的`模板标记`实现的。
-----------------------------
For more details about the basics of these terms, refer back to Chapter 3. 
The rest of this chapter discusses ways of extending the template engine. 
First, though, let’s take a quick look at a few internals left out of Chapter 3 for simplicity.
有关这些术语的基本知识的更多详细信息，请参阅第3章。
本章其余部分讨论`扩展模板引擎`的方法。
首先，为了简单起见，我们快速浏览第3章中遗留的一些内部结构。
===============================
### RequestContext and Context Processors
RequestContext和上下文处理器

When rendering a template, you need a context. 
This can be an instance of `django.template.Context`, but Django also comes with a subclass, `django.template.RequestContext`, that acts slightly differently.
当渲染一个模板时，您需要一个`上下文`。
这可以是一个`django.template.Context`的实例，但是Django还带有一个子类，“django.template.RequestContext”，它的行为略有不同。

`RequestContext` adds a bunch of variables to your template context by default – things like the `HttpRequest` object or information about the currently logged-in user.
The `render()` shortcut creates a `RequestContext` unless it’s passed a different context instance explicitly. 
For example, consider these two views:

`RequestContext`默认在你的`模板``上下文`中增加了一些`变量`，比如`HttpRequest`对象或者当前的`已经登录的用户`(`logged-in user`)的`信息`。
`render（）`快捷方式,会创建一个`RequestContext`，除非它明确地传递了一个不同的`上下文实例`。
例如，考虑这两个`视图`：
---------------
from django.template import loader, Context

def view_1(request):
    # ...
    t = loader.get_template('template1.html')
    c = Context({
        'app': 'My app',
        'user': request.user,
        'ip_address': request.META['REMOTE_ADDR'],
        'message': 'I am view 1.'
    })
    return t.render(c)

def view_2(request):
    # ...
    t = loader.get_template('template2.html')
    c = Context({
        'app': 'My app',
        'user': request.user,
        'ip_address': request.META['REMOTE_ADDR'],
        'message': 'I am the second view.'
    })
    return t.render(c)
------------------------
(Note that I’m deliberately not using the `render()` shortcut in these examples – we’re manually loading the templates, constructing the context objects and rendering the templates. 
I’m “spelling out” all of the steps for the purpose of clarity.)
（请注意，我故意在这些示例中不使用`render（）`快捷方式 - 我们`手动`加载模板，构建`上下文`对象并`呈现`模板。
为了`清晰`起见，我正在“拼出”所有的`步骤`。）

Each view passes the same three variables – `app`, `user` and `ip_address` – to its template. 
Wouldn’t it be nice if we could remove that redundancy? 
`RequestContext` and `context processors` were created to solve this problem. 
`Context processors` let you specify a number of variables that get set in each context automatically – without you having to specify the variables in each `render()` call.
每个视图将相同的三个变量 - “app”，“user”和“ip_address” - 传递给它的`模板`。
如果我们可以删除`冗余`，这不是很好吗？
`RequestContext`和`context processors`是为了解决这个问题而创建的。
`上下文处理器`可以让你指定一些`变量`，这些`变量`会自动在每个`上下文`中设置 - 而不必在每个`render（）`调用中指定`变量`。

The catch is that you have to use `RequestContext` instead of `Context` when you render a template. 
The most low-level way of using context processors is to create some processors and pass them to `RequestContext`. 
Here’s how the above example could be written with `context processors`:

问题在于，当您`呈现`一个`模板`时，您必须使用`RequestContext`而不是`Context`。
使用`上下文处理器`的`最低级别`的方式是，创建一些`处理器`并将它们`传递`给`RequestContext`。
以上是如何用`上下文处理器`编写上面的例子：
---------------------
from django.template import loader, RequestContext

def custom_proc(request):
    # A context processor that provides 'app', 'user' and 'ip_address'.
    return {
        'app': 'My app',
        'user': request.user,
        'ip_address': request.META['REMOTE_ADDR']
    }

def view_1(request):
    # ...
    t = loader.get_template('template1.html')
    c = RequestContext(request, 
                       {'message': 'I am view 1.'},  
                       processors=[custom_proc])
    return t.render(c)

def view_2(request):
    # ...
    t = loader.get_template('template2.html')
    c = RequestContext(request, 
                       {'message': 'I am the second view.'},  
                       processors=[custom_proc])
    return t.render(c)
---------------------
Let’s step through this code:
----------------
++ First, we define a function `custom_proc`. 
This is a context processor – it takes an `HttpRequest` object and returns a dictionary of variables to use in the template context. That’s all it does.
++首先，我们定义一个函数`custom_proc`。
这是一个`上下文处理器`-它需要一个`HttpRequest`对象,并返回一个包含多个变量的`字典`，在`模板`的`上下文`中使用。就是这样。

++ We’ve changed the two view functions to use `RequestContext` instead of `Context`. 
There are two differences in how the context is constructed. 
One, `RequestContext` requires the first argument to be an `HttpRequest` object – the one that was passed into the view function in the first place (request). 
Two, `RequestContext` takes an optional processors argument, which is a list or tuple of context processor functions to use. 
Here, we pass in `custom_proc`, the custom processor we defined above.
`上下文`的构建方式有`两点`区别。
1. `RequestContext`需要`第一个参数`是一个`HttpRequest`对象 - 第一个被传递给`view函数`的`请求`（request）。
2. `RequestContext`采用一个`可选的``处理器`参数，这是一个可以使用的`上下文处理器函数`的`列表`或`元组`。
在这里，我们传入我们上面定义的`定制处理器`--`custom_proc`。

++ Each view no longer has to include `app`, `user` or `ip_address` in its context construction, because those are provided by `custom_proc`.
++每个视图不必在其上下文构造中包含`app`，`user`或`ip_address`，因为这些由`custom_proc`提供。

++ Each view `still` has the `flexibility` to introduce any custom template variables it might need. 
In this example, the `message` template variable is set differently in each view.
In Chapter 3, I introduced the `render()` shortcut, which saves you from having to call `loader.get_template()`, then create a `Context`, then call the `render()` method on the template.
++每个`视图`,仍然具有'灵活性'，来引入它可能需要的任何自定义`模板变量`。
在这个例子中，`message`模板变量，在每个视图中设置不同。
在第3章中，我介绍了`render（）`快捷方式，它不需要调用`loader.get_template（）`，然后创建一个`Context`，然后在`模板`上调用`render（）`方法。
----------------
In order to demonstrate the lower-level workings of context processors, the above examples didn’t use `render()`.
 But it’s possible – and preferable – to use context processors with `render()`. 
Do this with the `context_instance` argument, like so:
为了演示`上下文处理器`的低层工作，上面的例子没有使用`render（）`。
但是可能的 - 也是可取的 - 通过`render（）`使用`上下文处理器`。
使用`context_instance`参数来执行此操作，如下所示：
----------
from django.shortcuts import render
from django.template import RequestContext

def custom_proc(request):
    # A context processor that provides 'app', 'user' and 'ip_address'.
    return {
        'app': 'My app',
        'user': request.user,
        'ip_address': request.META['REMOTE_ADDR']
    }

def view_1(request):
    # ...
    return render(request, 'template1.html',
                  {'message': 'I am view 1.'},
                  context_instance=RequestContext(
                  request, processors=[custom_proc]
                  )
    )

def view_2(request):
    # ...
    return render(request, 'template2.html', 
                  {'message': 'I am the second view.'},
                  context_instance=RequestContext(
                  request, processors=[custom_proc]
                  )
)
----------
Here, we’ve trimmed down each view’s template rendering code to a single (wrapped) line. 
This is an improvement, but, evaluating the conciseness of this code, we have to admit we’re now almost overdosing on the other end of the spectrum. 
We’ve removed redundancy in data (our template variables) at the cost of adding redundancy in code (in the processors call).
在这里，我们已经将每个`视图`的`模板渲染`代码，裁剪为一行代码（包装）。
这是一个改进，但是，评估这个代码的`简洁性`，我们不得不承认，我们现在几乎已经`过度`使用了另一端。
我们已经删除`在数据中`的`冗余`（我们的`模板变量`），代价是.在`代码中`,添加`冗余`（在`处理器`的`调用`中）。

Using context processors doesn’t save you much typing if you have to type processors all the time. 
For that reason, Django provides support for global context processors. 
The `context_processors` setting (in your `settings.py`) designates which context processors should always be applied to `RequestContext`. 
This removes the need to specify processors each time you use `RequestContext`.
如果您必须始终键入`处理器`，则使用`上下文处理器`并不会`节省`您很多时间。
出于这个原因，Django为`全局上下文处理器`提供`支持`。
`context_processors`设置（在`settings.py`中）指定哪个`上下文处理器`应该总是被应用到`RequestContext`。
这消除了每次使用`RequestContext`时都需要指定`处理器`的情况。

By default, `context_processors` is set to the following:
默认情况下，`context_processors`被设置为以下内容：
----------------------
'context_processors': [
            'django.template.context_processors.debug',
            'django.template.context_processors.request',
            'django.contrib.auth.context_processors.auth',
            'django.contrib.messages.context_processors.messages',
        ],
----------------------

This setting is a list of callables that use the same interface as our `custom_proc` function above – functions that take a request object as their argument and return a dictionary of items to be merged into the context. 
Note that the values in `context_processors` are specified as `strings`, which means the processors are required to be somewhere on your Python `path` (so you can refer to them from the `setting`).
这个`设置`是一个使用与我们上面的`custom_proc`函数相同接口的`可调用列表` - 将`请求对象`作为`参数`的`函数`，并返回一个`字典`，其`条目`被`合并`到`上下文`中。
请注意，`context_processors`中的值被指定为`strings`（`字符串`），这意味着`处理器`需要位于`Python路径`中的`某处`（所以你可以从`setting`中`引用`它们）。

Each processor is applied in order.
That is, if one processor adds a variable to the context and a second processor adds a variable with the same name, the second will override the first. 
Django provides a number of simple context processors, including the ones that are enabled by default:

每个`处理器`按`顺序`应用。
也就是说，如果一个`处理器`将一个`变量`添加到`上下文`中，并且第二个`处理器`,添加一个具有相同名称的`变量`，则第二个处理器将`覆盖`第一个。
Django提供了许多简单的`上下文处理器`，包括默认`启用`的`处理器`：
==============
auth

`django.contrib.auth.context_processors.auth`

If this processor is enabled, every `RequestContext` will contain these variables:
--------------
++ `user` – An `auth.User` instance representing the currently logged-in user (or an `AnonymousUser` instance, if the client isn’t logged in).
++ `perms` – An instance of `django.contrib.auth.context_processors.PermWrapper`, representing the permissions that the currently logged-in user has.
--------------
================
debug

`django.template.context_processors.debug`

If this processor is enabled, every `RequestContext` will contain these two variables – but only if your DEBUG setting is set to `True` and the request’s IP address (`request.META['REMOTE_ADDR']`) is in the `INTERNAL_IPS` setting:
---------------
++ `debug` – True.
You can use this in templates to test whether you’re in `DEBUG` mode.
++ `sql_queries` – A list of {'sql': ..., 'time': ...} dictionaries, representing every SQL query that has happened so far during the request and how long it took. 
The list is in order by query and lazily generated on access.
---------------
===============
i18n

`django.template.context_processors.i18n`

If this processor is enabled, every `RequestContext` will contain these two variables:
--------------
LANGUAGES – The value of the LANGUAGES setting.
LANGUAGE_CODE – `request.LANGUAGE_CODE`, if it exists. 
Otherwise, the value of the `LANGUAGE_CODE` setting.
--------------
===============
media

`django.template.context_processors.media`

If this processor is enabled, every `RequestContext` will contain a variable `MEDIA_URL`, providing the value of the `MEDIA_URL` setting.
===============
static

`django.template.context_processors.static`

If this processor is enabled, every `RequestContext` will contain a variable `STATIC_URL`, providing the value of the `STATIC_URL` setting.
===================
csrf
django.template.context_processors.csrf

This processor adds a token that is needed by the csrf_token template tag for protection against cross site request forgeries (see Chapter 19).

===================
request
django.template.context_processors.request

If this processor is enabled, every RequestContext will contain a variable request, which is the current HttpRequest.

===================
messages
django.contrib.messages.context_processors.messages

If this processor is enabled, every `RequestContext` will contain these two variables:
-------------------
messages – A list of messages (as strings) that have been set via the messages framework.
DEFAULT_MESSAGE_LEVELS – A mapping of the message level names to their numeric value.
-------------------
===================
