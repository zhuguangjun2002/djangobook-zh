Serving Files in Production
在生产中提供文件

Django doesn’t serve files itself; it leaves that job to whichever Web server you choose. We recommend using a separate Web server – i.e., one that’s not also running Django – for serving media. Here are some good choices:
Django本身不提供文件;它将该`作业`留给您选择的任何`Web服务器`。我们建议使用一个单独的`Web服务器` - 即`不运行``Django的服务器` - 用于`服务媒体`。
以下是一些不错的选择：
-----------------
++ Nginx
++ A stripped-down version of Apache
-----------------
If, however, you have no option but to serve media files on the same Apache VirtualHost as Django, you can set up Apache to serve some URLs as static media, and others using the mod_wsgi interface to Django.
但是，如果您没有选择，只能在与Django相同的`Apache VirtualHost`上提供`媒体文件`，则可以将`Apache`设置为将`某些URL`作为`静态媒体`提供，并将其他设置用作使用`Django`的`mod_wsgi`接口。

This example sets up Django at the site root, but explicitly serves robots.txt, favicon.ico, any CSS file, and anything in the /static/ and /media/ URL space as a static file. All other URLs will be served using mod_wsgi:
此示例在站点`根目录`中设置`Django`，但将`robots.txt，favicon.ico，任何`CSS`文件,以及`/static/`和`/media/` `URL空间`中的任何内容`显式地`作为一个`静态文件`提供。
所有`其他URL`将使用`mod_wsgi`提供：

--------------------
Alias /robots.txt /path/to/mysite.com/static/robots.txt
Alias /favicon.ico /path/to/mysite.com/static/favicon.ico

Alias /media/ /path/to/mysite.com/media/
Alias /static/ /path/to/mysite.com/static/

<Directory /path/to/mysite.com/static>
Require all granted
</Directory>

<Directory /path/to/mysite.com/media>
Require all granted
</Directory>

WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py

<Directory /path/to/mysite.com/mysite>
<Files wsgi.py>
Require all granted
</Files>
</Directory>
--------------------
If you are using a version of Apache older than 2.4, replace Require all granted with Allow from all and also add the line Order deny,allow above it.
如果您使用的是2.4以前版本的Apache，请将所有`Requrie all granted`替换为`Allow from all`，并且添加行`Order deny,allow`在其之上。
==================================
Serving The Admin Files
提供Admin文件

When django.contrib.staticfiles is in INSTALLED_APPS, the Django development server automatically serves the static files of the admin app (and any other installed apps). This is however not the case when you use any other server arrangement. You’re responsible for setting up Apache, or whichever Web server you’re using, to serve the admin files.

在`INSTALLED_APPS`中时，Django`开发服务器`会自动`提供``admin 应用程序`的`静态文件`（以及`其他`已安装的`应用程序`）。
然而，当您使用任何其他`服务器`配置时，情况并非如此。
您有责任去｀设置｀`Apache`，或您使用的任何`Web服务器`，以便为`admin文件`提供`服务`。

The admin files live in (django/contrib/admin/static/admin) of the Django distribution. We strongly recommend using django.contrib.staticfiles to handle the admin files (along with a Web server as outlined in the previous section; this means using the collectstatic management command to collect the static files in STATIC_ROOT, and then configuring your Web server to serve STATIC_ROOT at STATIC_URL), but here are three other approaches:
`admin 文件`位于Django发行版的（`django/contrib/admin/static/admin）中。
我们强烈建议使用`django.contrib.staticfiles`来处理`admin 文件`
（以及上一节中概述的`Web服务器`;
这意味着使用`collectstatic`管理命令来收集`STATIC_ROOT`中的`静态文件`，
然后`配置`您的`Web服务器`以在`STATIC_URL｀位置，来服务`STATIC_ROOT`），
但这里有三种其他方法：
-----------------------------
1. Create a symbolic link to the admin static files from within your document root (this may require +FollowSymLinks in your Apache configuration).
2. Use an Alias directive, as demonstrated above, to alias the appropriate URL (probably STATIC_URL + admin/) to the actual location of the admin files.
3. Copy the admin static files so that they live within your Apache document root.

1.从文档`根目录`中创建一个到`admin静态文件`的`符号链接`（这可能需要`Apache配置`中的`+FollowSymLinks`）。
2.如上所示，使用`Alias指令`将相应的`URL`（可能是`STATIC_URL` + `admin/`）`别名`到`admin 文件`的`实际位置`。
3.复制`admin静态文件`，以便它们位于`Apache``文档``根目录`中。
-----------------------------
==================================
If You Get a Unicodeencodeerror
如果你得到一个Unicodeencodeerror-编码错误

If you’re taking advantage of the internationalization features of Django and you intend to allow users to upload files, you must ensure that the environment used to start Apache is configured to accept non-ASCII file names. If your environment is not correctly configured, you will trigger UnicodeEncodeError exceptions when calling functions like the ones in os.path on filenames that contain non-ASCII characters.
如果您正在利用Django的`国际化``功能`，并且您打算允许用户`上传``文件`，则必须确保用于启动`Apache`的`环境`已配置为`接受``非ASCII文件名`。
如果您的`环境``未正确``配置`，则在调用包含`非ASCII字符`的文件名的`os.path`中的函数时，将触发`UnicodeEncodeError``异常`。

To avoid these problems, the environment used to start Apache should contain settings analogous to the following:
为了避免这些问题，用于`启动``Apache`的`环境`应包含类似于以下`内容`的`设置`：
----------------------
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'
----------------------
Consult the documentation for your operating system for the appropriate syntax and location to put these configuration items; /etc/apache2/envvars is a common location on Unix platforms. Once you have added these statements to your environment, restart Apache.
请参阅您操作系统的文档以获取适当的语法和位置以放置这些配置项; 
/etc/apache2/envvars是Unix平台上的常见位置。
一旦将这些语句添加到您的环境中，请重新启动Apache。
==================================
Serving Static Files in Production

The basic outline of putting static files into production is simple: run the collectstatic command when static files change, then arrange for the collected static files directory (STATIC_ROOT) to be moved to the static file server and served.
将`静态文件`投入`生产`的基本概述很简单：
在`静态文件`更改时运行`collectstatic`命令，
然后将`收集`的`静态文件目录`（STATIC_ROOT）安排到`静态文件服务器`并提供`服务`。

Depending on STATICFILES_STORAGE, files may need to be moved to a new location manually or the post_process method of the Storage class might take care of that.
根据`STATICFILES_STORAGE`，可能需要`手动`将`文件`移动到`新的位置`，否则`Storage类`的`post_process`方法可能会`处理`此问题。

Of course, as with all deployment tasks, the devil’s in the details. Every production setup will be a bit different, so you’ll need to adapt the basic outline to fit your needs.
当然，就像所有部署任务一样，`魔鬼`在`细节`上。每个`生产设置`都会有所不同，因此您需要调整`基本轮廓`以适应您的`需求`。
Below are a few common patterns that might help.
以下是一些可能有所帮助的常见模式。
==================================
Serving The Site and Your Static Files from the Same Server
从同一服务器提供站点和您的静态文件

If you want to serve your static files from the same server that’s already serving your site, the process may look something like:
如果您想从已经为您的网站提供服务的同一服务器提供静态文件，则此过程可能如下所示：
-----------------
++ Push your code up to the deployment server.
++ On the server, run collectstatic to copy all the static files into STATIC_ROOT.
++ Configure your web server to serve the files in STATIC_ROOT under the URL STATIC_URL.
++ 将`代码`推送到`部署服务器`。
++ 在`服务器`上，运行`collectstatic`将所有`静态文件`复制到`STATIC_ROOT`。
++ 将您的`Web服务器`配置为在`STATIC_URL`下的`STATIC_ROOT`中提供文件。
-----------------

You’ll probably want to automate this process, especially if you’ve got multiple web servers. There’s any number of ways to do this automation, but one option that many Django developers enjoy is Fabric.
您可能希望`自动`执行此过程，特别是如果您拥有`多个``Web服务器`。
有许多方法可以实现这种`自动化`，但许多Django开发人员喜欢的一种选择是：`Fabric`。


-----------------
from fabric.api import *

# Hosts to deploy onto
env.hosts = ['www1.example.com', 'www2.example.com']

# Where your project code lives on the server
env.project_root = '/home/www/myproject'

def deploy_static():
    with cd(env.project_root):
        run('./manage.py collectstatic -v0 --noinput')
-----------------
==================================
Serving Static Files from a Dedicated Server
从一个`专用服务器`提供`静态文件`

Most larger Django sites use a separate Web server – i.e., one that’s not also running Django – for serving static files. This server often runs a different type of web server – faster but less full-featured. Some common choices are:
大多数较大的`Django`站点,使用`单独`的`Web服务器`（即，也不是运行Django的服务器）来提供`静态文件`。
该`服务器`通常运行一个`不同类型`的`Web服务器` - `速度`更快但`功能更少`。一些常见的选择是：
----------
++ Nginx
++ A stripped-down version of Apache
----------
Configuring these servers is out of scope of this document; check each server’s respective documentation for instructions. Since your static file server won’t be running Django, you’ll need to modify the deployment strategy to look something like:
配置这些服务器超出了本文档的范围;
检查每个服务器的相应文档以获取说明。
由于您的`静态文件服务器`不会运行`Django`，因此您需要`修改``部署策略`，如下所示：

1. When your static files change, run collectstatic locally.
2. Push your local STATIC_ROOT up to the static file server into the directory that’s being served. rsync is a common choice for this step since it only needs to transfer the bits of static files that have changed.
Here’s how this might look in a fabfile:

1.当您的`静态文件`发生`更改`时，请在本地运行`collectstatic`。
2.将您的本地`STATIC_ROOT``Push到``静态文件服务器`，并将其放入要提供服务的`目录`中。 
`rsync`是此步骤的常用选择，因为它只需传输`已更改`的`静态文件`的位。
下面是在`fabfile`中可能的情况：
-------------------
 from fabric.api import *
 from fabric.contrib import project

 # Where the static files get collected locally. Your STATIC_ROOT setting.
 env.local_static_root = '/tmp/static'

 # Where the static files should go remotely
 env.remote_static_root = '/home/www/static.example.com'

 @roles('static')
 def deploy_static():
     local('./manage.py collectstatic')
     project.rsync_project(
         remote_dir = env.remote_static_root,
         local_dir = env.local_static_root,
         delete = True
     )
-------------------
==================================
Serving Static Files from a Cloud Service or CDN
从一个`云服务`或`CDN`提供`静态文件`服务

Another common tactic is to serve static files from a cloud storage provider like Amazon’s S3 and/or a CDN (content delivery network). This lets you ignore the problems of serving static files and can often make for faster-loading webpages (especially when using a CDN).

另一种常见策略是从`Amazon S3`和/或`CDN`（`内容交付网络`）等`云存储``提供商`处提供`静态文件`。
这可以让您`忽略`服务`静态文件`的问题，并且通常可以使`网页``更快加载`（特别是在使用`CDN`时）。

When using these services, the basic workflow would look a bit like the above, except that instead of using rsync to transfer your static files to the server you’d need to transfer the static files to the storage provider or CDN. There’s any number of ways you might do this, but if the provider has an API a custom file storage backend will make the process incredibly simple.
在使用这些服务时，`基本工作流`看起来有点像上面的，除了使用`rsync`将`静态文件`传输到`服务器`之外，您需要将`静态文件`传输到`存储提供程序`或`CDN`。
有`多种方式`可以做到这一点，但如果`提供者`具有API，则`自定义``文件存储后端`将使该`过程`变得非常`简单`。

If you’ve written or are using a 3rd party custom storage backend, you can tell collectstatic to use it by setting STATICFILES_STORAGE to the storage engine. For example, if you’ve written an S3 storage backend in myproject.storage.S3Storage
you could use it with:
如果您已经编写或正在使用`第三方``自定义存储后端`，则可以通过将`STATICFILES_STORAGE`设置为`存储引擎`来告诉`collectstatic`使用它。
例如，如果您在`myproject.storage.S3Storage`中编写了`S3存储后端`
你可以使用它：
----------------
STATICFILES_STORAGE = 'myproject.storage.S3Storage'
----------------
Once that’s done, all you have to do is run collectstatic and your static files would be pushed through your storage package up to S3. If you later needed to switch to a different storage provider, it could be as simple as changing your STATICFILES_STORAGE setting. There are 3rd party apps available that provide storage backends for many common file storage APIs. A good starting point is the overview at djangopackages.com.
完成之后，您只需运行`collectstatic`，并将`静态文件`通过`存储包`推送到`S3`。
如果以后需要切换到不同的`存储提供商`，则可以像更改`STATICFILES_STORAGE`设置一样简单。
有`第三方应用程序`可用于为许多常见的`文件存储API`提供`存储后端`。 
`djangopackages.com`提供了一个很好的起点。
==================================
