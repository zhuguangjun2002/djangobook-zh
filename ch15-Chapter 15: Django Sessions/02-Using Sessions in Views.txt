Using Sessions in Views
在视图中使用会话

When SessionMiddleware is activated, each HttpRequest object – the first argument to any Django view function – will have a session attribute, which is a dictionary-like object. You can read it and write to request.session at any point in your view. You can also edit it multiple times.
当i`SessionMiddleware`被`激活`时，每个`HttpRequest`对象 - 任何`Django``视图函数`的`第一个参数` - 将具有一个`session`属性，这是一个`类似字典`的`对象`。
您可以`read`它，并在您的`视图`中的`任何位置`写入`request.session`。
您也可以编辑它多次。

All session objects inherit from the base class backends.base.SessionBase. It has the following standard dictionary methods:
所有`会话对象`都从`基类``backends.base.SessionBase`继承。
它具有以下标准`字典``方法`：
-------------------
__getitem__(key)
__setitem__(key, value)
__delitem__(key)
__contains__(key)
get(key, default=None)
pop(key)
keys()
items()
setdefault()
clear()
-------------------
It also has these methods:
-------------------
============
flush()

Delete the current session data from the session and delete the session cookie. This is used if you want to ensure that the previous session data can’t be accessed again from the user’s browser (for example, the django.contrib.auth.logout() function calls it).
从`会话`中`删除`当前`会话数据`并`删除``会话cookie`。
如果要确保先前的`会话数据`不能从`用户`的`浏览器`再次访问（例如，`django.contrib.auth.logout（）`函数调用它），则`使用`此`选项`。

============
set_test_cookie()

Sets a test cookie to determine whether the user’s browser supports cookies. Due to the way cookies work, you won’t be able to test this until the user’s next page request. See “setting test cookies”
below for more information.
设置一个测试Cookie，以确定`用户`的`浏览器`是否支持`Cookie`。
由于`Cookie`的工作方式，您将无法在用户的`下一页`请求之前对其进行`测试`。
请参阅“设置测试cookie”
============
test_cookie_worked()

Returns either True or False, depending on whether the user’s browser accepted the test cookie. Due to the way cookies work, you’ll have to call set_test_cookie() on a previous, separate page request. See “Setting test cookies” below for more information.
根据用户的浏览器是否接受测试Cookie，返回True或False。
由于Cookie的工作方式，您必须在先前的`单独页面请求`中调用`set_test_cookie（）`。
有关更多信息，请参阅下面的“设置测试Cookie”。
============
delete_test_cookie()

Deletes the test cookie. Use this to clean up after yourself.
删除测试cookie。用它来清理你自己。
============
set_expiry(value)

Sets the expiration time for the session. You can pass a number of different values:
设置会话的到期时间。您可以传递许多不同的值：
------------------------
++ If value is an integer, the session will expire after that many seconds of inactivity.
For example, calling request.session.set_expiry(300) would make the session expire in 5 minutes.
++如果value是一个整数，那么会话将在多秒钟不活动之后过期。
例如，调用`request.session.set_expiry（300）`会使`会话`在`5分钟`内`过期`。

++ If value is a datetime or timedelta object, the session will expire at that specific date/time. Note that datetime and timedelta values are only serializable if you are using the PickleSerializer.
++ 如果value是一个`日期时间`或`timedelta`对象，则`会话`将在该`特定日期/时间``到期`。
请注意，如果您使用`PickleSerializer`，则`datetime`和`timedelta`值仅可`序列化`。

++ If value is 0, the user’s session cookie will expire when the user’s Web browser is closed.
++如果值为0，用户的`会话cookie`将在用户的`Web浏览器``关闭`时`到期`。

++ If value is None, the session reverts to using the global session expiry policy.
++ 如果值为None，则`会话`将`恢复`为使用`全局会话到期策略`。
------------------------
Reading a session is not considered activity for expiration purposes. Session expiration is computed from the last time the session was modified.
`读取`一个`会话`，不被视为`有效到期`的活动。`会话过期`是从`上次会话`被`修改`时`计算`出来的。
============
get_expiry_age()

Returns the number of seconds until this session expires. For sessions with no custom expiration (or those set to expire at browser close), this will equal SESSION_COOKIE_AGE. This function accepts two optional keyword arguments:
返回此会话到期之前的秒数。
对于没有`自定义`到期的`会话`（或`设置`为在`浏览器关闭`时`过期`的`会话`），这将等于`SESSION_COOKIE_AGE`。该`函数`接受两个可选的关键字参数：
-------------
++ modification: last modification of the session, as a datetime object. Defaults to the current time.
++ 修改：`会话`的`最后修改`，作为一个`日期时间`对象。默认为，`当前时间`。

++ expiry: expiry information for the session, as a datetime object, an int (in seconds), or None. Defaults to the value stored in the session by set_expiry(), if there is one, or None.
++ expiry：`会话`的`到期信息`，作为y一个`日期时间对象`，`int`（以`秒`为单位）或`None`。
如果存在一个值，则默认为`set_expiry（）`存储在该`会话`中的`值`，或者是`None`。
-------------
============
get_expiry_date()

Returns the date this session will expire. For sessions with no custom expiration (or those set to expire at browser close), this will equal the date SESSION_COOKIE_AGE seconds from now. This function accepts the same keyword arguments as get_expiry_age().
返回此`会话`过期的`日期`。
对于没有`自定义``到期`的`会话`（或设置为在`浏览器关闭`时`过期`的`会话`），这将等于从现在开始的`SESSION_COOKIE_AGE`秒。
该函数接受与`get_expiry_age（）`相同的`关键字`参数。
============
get_expire_at_browser_close()

Returns either True or False, depending on whether the user’s session cookie will expire when the user’s Web browser is closed.
返回True或False，取决于用户的`Web浏览器`关闭时,用户的`会话Cookie`是否`过期`。
============
clear_expired()

Removes expired sessions from the session store. This class method is called by clearsessions.
从`会话存储`中`删除``过期`的`会话`。这个`类方法`由`clearsessions`调用。

============
cycle_key()

Creates a new session key while retaining the current session data. django.contrib.auth.login() calls this method to mitigate against session fixation.
在`保留`当前`会话数据`的同时,`创建`新的`会话密钥`。`django.contrib.auth.login（）`调用此方法来`减轻``会话固定`(`session fixation`)。
============
-------------------
===============================================
Session Object Guidelines
会话对象准则
-----------------
++ Use normal Python strings as dictionary keys on request.session. This is more of a convention than a hard-and-fast rule.
++ Session dictionary keys that begin with an underscore are reserved for internal use by Django.
++ Don’t override request.session with a new object, and don’t access or set its attributes. Use it like a Python dictionary.

++ 使用`普通`的`Python字符串`作为`request.session`上的`字典``键`。这是一个比`硬性规定`更重要的`惯例`。
++ 以`下划线``开头`的`会话``字典键`由`Django`保留供`内部使用`。
++ 不要用`新对象`覆盖`request.session`，也不要`访问`或`设置`它的`属性`。像`Python字典`一样使用它。
-----------------
===============================================
Session Serialization
会话序列化

Before version 1.6, Django defaulted to using pickle to serialize session data before storing it in the backend. If you’re using the signed cookie session backend and SECRET_KEY is known by an attacker (there isn’t an inherent vulnerability in Django that would cause it to leak), the attacker could insert a string into their session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily available on the internet.

在`版本1.6`之前，Django默认使用`pickle`将`会话数据``序列化`，然后将其`存储`在`后端`。
如果您使用的是经过`签名`的`cookie会话后端`，并且`SECRET_KEY`被`攻击者`所知（在Django中没有可能导致其泄漏的`固有漏洞`），`攻击者`可以在`会话`中插入一个`字符串`，该`字符串`在取消时,会执行`服务器`上的`任意代码`。这样做的技术很简单，并且可以在互联网上轻松获得。

Although the cookie session storage signs the cookie-stored data to prevent tampering, a SECRET_KEY leak immediately escalates to a remote code execution vulnerability. This attack can be mitigated by serializing session data using JSON rather than pickle. To facilitate this, Django 1.5.3 introduced a new setting, SESSION_SERIALIZER, to customize the session serialization format. For backwards compatibility, this setting defaults to using django.contrib.sessions.serializers.PickleSerializer in Django 1.5.x, but, for security hardening, defaults to django.contrib.sessions.serializers.JSONSerializer from Django 1.6 onward.

尽管`cookie会话存储器`会对`cookie`存储的`数据`进行`签名`以防止`篡改`，但`SECRET_KEY`泄漏,会立即`升级`为`远程执行代码`的`漏洞`。
这种攻击可以通过使用`JSON`而不是`pickle``序列化``会话数据`来`缓解`。
为了实现这一点，Django 1.5.3引入了一个新的设置`SESSION_SERIALIZER`来定制`会话序列化``格式`。
为了向后兼容，此设置默认使用`Django 1.5.x`中的`django.contrib.sessions.serializers.PickleSerializer`，
但为了加强`安全性`，默认为从`Django 1.6`开始的`django.contrib.sessions.serializers.JSONSerializer`。

Even with the caveats described in custom-serializers, we highly recommend sticking with JSON serialization especially if you are using the cookie backend.
即使在`自定义``序列化器`中描述的`警告`中，我们强烈建议坚持使用`JSON序列化`，特别是如果您使用的是`Cookie后端`。
===============================================
Bundled Serializers

===================
serializers.JSONSerializer

A wrapper around the JSON serializer from django.core.signing. Can only serialize basic data types. In addition, as JSON supports only string keys, note that using non-string keys in request.session won’t work as expected:
来自`django.core.signing`的`JSON序列化`有一个`包装`。只能`序列化``基本数据类型`。
此外，由于`JSON`仅支持`字符串``键`，请注意，在`request.session`中使用`非字符串``键`将`无法``按预期`工作：
-----------------------
>>> # initial assignment
>>> request.session[0] = 'bar'
>>> # subsequent requests following serialization &
deserialization
>>> # of session data
>>> request.session[0]  # KeyError
>>> request.session['0']
'bar'
----------------------------
See the custom-serializers section for more details on limitations of JSON serialization.
有关JSON序列化限制的更多详细信息，请参阅custom-serializers部分。
===================
serializers.PickleSerializer

Supports arbitrary Python objects, but, as described above, can lead to a remote code execution vulnerability if SECRET_KEY becomes known by an attacker.
支持任意的Python对象，但如上所述，如果`SECRET_KEY`被`攻击者`知道，则可能导致一个`远程执行代码漏洞`。
===============================================
Write Your Own Serializer
`编写`你自己的`串行器`

Note that unlike PickleSerializer, the JSONSerializer cannot handle arbitrary Python data types. As is often the case, there is a trade-off between convenience and security. If you wish to store more advanced data types including datetime and Decimal in JSON backed sessions, you will need to write a custom serializer (or convert such values to a JSON serializable object before storing them in request.session).
请注意，与`PickleSerializer`不同，`JSONSerializer`无法处理任意`Python数据类型`。
通常情况下，`便利性`和`安全性`之间有一个`折衷`。
如果您希望在`JSON`支持的`会话`中存储`更高级`的`数据类型`（包括`datetime`和`Decimal`），
则需要`编写`自定义序列化程序`（或将这些值存储到`request.session`中之前将其转换为一个`JSON可序列化对象`）。

While serializing these values is fairly straightforward (django.core.serializers.json.DateTimeAwareJSONEncoder may be helpful), writing a decoder that can reliably get back the same thing that you put in is more fragile. For example, you run the risk of returning a datetime that was actually a string that just happened to be in the same format chosen for datetime).
虽然`序列化`这些`值`非常`简单`（`django.core.serializers.json.DateTimeAwareJSONEncoder`可能会有所帮助），但编写一个可以`可靠``恢复`所放入的相同内容的`解码器`会更`脆弱`。
例如，你冒着返回`日期时间`的`风险`，这个`日期时间`实际上是一个恰好与`日期时间`相同的`格式`的`字符串`）。
Your serializer class must implement two methods, dumps(self, obj) and loads(self, data), to serialize and deserialize the dictionary of session data, respectively.
您的序列化程序类必须实现两种方法，dump(self,obj) 和 `load（self，data）,以`序列化`和`反序列化``会话数据``字典`。
===============================================
Setting Test Cookies
设置测试Cookie

As a convenience, Django provides an easy way to test whether the user’s browser accepts cookies. Just call the set_test_cookie() method of request.session in a view, and call test_cookie_worked() in a subsequent view – not in the same view call.
为了方便起见，Django提供了一种简单的方法来`测试``用户`的`浏览器`是否`接受``cookie`。
只需在`视图`中调用`request.session`的`set_test_cookie（）`方法，然后在`后续``视图`中调用`test_cookie_worked（`），而不是在`同一视图`调用中`调用`。

This awkward split between set_test_cookie() and test_cookie_worked() is necessary due to the way cookies work. When you set a cookie, you can’t actually tell whether a browser accepted it until the browser’s next request. It’s good practice to use delete_test_cookie() to clean up after yourself. Do this after you’ve verified that the test cookie worked.
由于`cookie`的`工作方式`，`set_test_cookie（）`和`test_cookie_worked（）`之间的这种尴尬`分裂`是`必要的`。
当你设置一个`cookie`时，你不能确定`浏览器`是否`接受`它，直到浏览器的`下一个请求`。
最好使用`delete_test_cookie（）`来`清理``自己`。
在您验证测试`cookie`正常工作后,执行此操作。

Here’s a typical usage example:
以下是一个典型的使用示例：
-----------------------
def login(request):
    if request.method == 'POST':
        if request.session.test_cookie_worked():
            request.session.delete_test_cookie()
            return HttpResponse("You're logged in.")
        else:
            return HttpResponse("Please enable cookies and try again.")
    request.session.set_test_cookie()
    return render_to_response('foo/login_form.html')
-----------------------
===============================================
