============================
Customizing Change Lists and Forms
----------
https://djangobook.com/customizing-change-lists-forms/
----------
============================

============================
We can improve on this default behavior by adding a few other fields to the change list display.
It’d be handy, for example, to see each author’s `e-mail` address in this list, and it’d be nice to be able to sort by first and last name.
我们可以通过向`更改列表`添加一些`其他字段`来改进此默认行为。
例如，在这个`列表`中,查看每个`作者`的“电子邮件”地址将会很方便，并且能够按`姓`和`名`进行`排序`会很好。

To make this happen, we’ll define a `ModelAdmin` class for the `Author` model.
This class is the key to customizing the `admin`, and one of the most basic things it lets you do is specify the list of fields to display on change list pages. 
Edit `admin.py` to make these changes:
为了做到这一点，我们将为`Author`模型,定义一个`ModelAdmin`类。
这个类是定制“admin”的关键，它允许你做的最基本的事情之一是,指定要`显示`在`更改列表`页面上的`字段列表`。
编辑`admin.py`进行这些更改：
-------------------
from django.contrib import admin
from .models import Publisher, Author, Book

class AuthorAdmin(admin.ModelAdmin):
    list_display = ('first_name', 'last_name', 'email')

admin.site.register(Publisher)
admin.site.register(Author, AuthorAdmin)
admin.site.register(Book)
-------------------
我们主要做了如下内容：
-------------------
++ We created the class `AuthorAdmin`. 
This class, which subclasses `django.contrib.admin.ModelAdmin`, holds custom configuration for a specific `admin` model. 
We’ve only specified one customization – `list_display`, which is set to a tuple of field names to display on the change list page. 
These field names must exist in the model, of course.

++我们创建了类`AuthorAdmin`
这个类是`django.contrib.admin.ModelAdmin`的子类，为特定的`admin`模型保存`自定义`配置。
我们只指定了一个`定制` - “list_display”，它被设置为`字段名称`的`元组`，以显示在`更改列表`页面上。
当然，这些`字段名称`必须存在于`模型`中。

++ We altered the `admin.site.register()` call to add `AuthorAdmin` after `Author`. 
You can read this as: “Register the `Author` model with the `AuthorAdmin` options.”
The `admin.site.register()` function takes a `ModelAdmin` subclass as an optional second argument. 
If you don’t specify a second argument (as is the case for `Publisher` and `Book`), Django will use the default `admin` options for that `model`.

++我们改变了`admin.site.register（）`调用，在`Author`之后添加`AuthorAdmin`。
您可以将其读为：“使用`AuthorAdmin`选项,注册`Author`模型。”
`admin.site.register（）`函数将`ModelAdmin`的子类作为`可选`的`第二个`参数。
如果你没有指定`第二个参数`（如`Publisher`和`Book`），Django将使用默认的`admin`选项作为该`model`。
------------------
============================
##  添加`搜索栏`

Next, let’s add a simple search bar. 
Add `search_fields` to the `AuthorAdmin`, like so:
将`search_fields`添加到`AuthorAdmin`，如下所示：
--------------------------
class AuthorAdmin(admin.ModelAdmin):
    list_display = ('first_name', 'last_name', 'email')
    search_fields = ('first_name', 'last_name')
--------------------------
Reload the page in your browser, and you should see a search bar at the top. (See Figure 5-9.) 
We’ve just told the admin change list page to include a search bar that searches against the `first_name` and `last_name` fields. 
As a user might expect, this is case-insensitive and searches both fields, so searching for the string `“bar”` would find both an author with the first name `Barney` and an author with the last name `Hobarson`.
在浏览器中重新加载页面，您应该在`顶部`看到一个`搜索栏`。 （见图5-9）
我们刚刚告诉`管理界面`的`更改列表`页面，其中包含一个`搜索栏`，用于搜索“first_name”和“last_name”字段。
正如用户预期的那样，这是`不区分`大小写的，并且`搜索`这两个字段，因此，搜索字符串“bar”会找到名字为“Barney”的作者和姓氏为“Hobarson”的作者。

Next, let’s add some date filters to our `Book` model’s change list page:
接下来，让我们在我们的“Book”模型的`更改列表`页面中,添加一些`日期`过滤器：
--------------------------
from django.contrib import admin
from .models import Publisher, Author, Book

class AuthorAdmin(admin.ModelAdmin):
    list_display = ('first_name', 'last_name', 'email')
    search_fields = ('first_name', 'last_name')

class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'publisher', 'publication_date')
    list_filter = ('publication_date',)

admin.site.register(Publisher)
admin.site.register(Author, AuthorAdmin)
admin.site.register(Book, BookAdmin)
----------------------------
`list_filter` also works on fields of other types, not just `DateField`. 
(Try it with `BooleanField` and `ForeignKey` fields, for example.) 
The filters show up as long as there are at least 2 values to choose from. 
Another way to offer date filters is to use the `date_hierarchy` admin option, like this:

`list_filter`也适用于其他类型的`字段`，而不仅仅是`DateField`字段。
（例如，用`BooleanField`和`ForeignKey`字段来尝试。）
只要有至少`2个`值可供选择，`过滤器`就会显示出来。
提供`日期过滤器`的另一种方法是使用`date_hierarchy`管理选项，如下所示：
--------------------------
class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'publisher','publication_date')
    list_filter = ('publication_date',)
    date_hierarchy = 'publication_date'
-------------------------

With this in place, the change list page gets a date drill-down navigation bar at the top of the list, as shown in Figure 5-11.
It starts with a list of available years, then drills down into months and individual days.
有了这个，`更改列表`页面会在`列表`的`顶部`获得一个`日期下拉导航栏`，如图5-11所示。
它从可用`年份`列表开始，然后逐渐演变为几个月和个别日子。

请注意，`date_hierarchy`接受一个字符串，而`不是`一个`元组`，因为只有一个`日期字段`可用于创建`层次结构`。
最后，让我们更改`默认排序`，以便`更改列表`页面上的`图书`总是按`发布日期``降序`排列。
===============================
===============================
By default, the change list orders objects according to their model’s ordering within `class Meta` (which we covered in Chapter 4) 
– but you haven’t specified this `ordering` value, then the `ordering` is undefined.

默认情况下，在`更改列表`页面，是根据你的`模型`中`class Meta`中所定义的`ordering`（我们将在第4章中介绍）对`对象`进行排序的 
-- 但您没有指定此`排序`的值，则`排序`未定义。

所以，我们直接在`BookAdmin`类里面，定义`管理界面`中，`Book`的`ordering`（排序），如下所示：
----------------------------------------------------------
class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'publisher','publication_date')
    list_filter = ('publication_date',)
    date_hierarchy = 'publication_date'
    ordering = ('-publication_date',)
----------------------------------------------------------
This `admin` `ordering` option works exactly as the ordering in models’ `class Meta`, except that it only uses the first field name in the list. 
Just pass a list or tuple of field names, and add a `minus` sign to a field to use descending sort order. 

此`管理页面`的`排序选项`与`模型`的`class Meta`中的`排序`是完全相同，只是它仅使用了`列表`中的`第一个`字段名称。
只需传递一个`列表`或`字段名称`的`元组`，并将一个`-`符号，添加到`字段`上，以使用`降序`。

重新加载`书籍`的`更改列表`以查看该操作。
请注意，“发布日期”标题现在包含一个`小箭头`，指示记录的`排序方式`。 （见图5-12）

===============================

===============================
###Customizing Edit Forms
自定义编辑表单

就像`更改列表`页面，可以`自定义`一样，`编辑表单`（Edit Forms）可以通过多种方式进行`自定义`。

首先，我们来`定制`字段`的`排序`方式。
默认情况下，`编辑表单`中`字段`的顺序与它们在`模型`中定义的`顺序`相对应。
我们可以使用`ModelAdmin`子类中的`fields`选项来`更改`它：
----------------------------------------------------------
class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'publisher', 'publication_date')
    list_filter = ('publication_date',)
    date_hierarchy = 'publication_date'
    ordering = ('-publication_date',)
    fields = ('title', 'authors', 'publisher', 'publication_date')
----------------------------------------------------------
在此更改之后，`书籍`的`编辑表单`将使用`给定的`字段顺序。
`书名`后,跟着`作者`，感觉稍微更自然。
当然，实际的`表单`应该取决于您的数据输入`工作流程`。每种`表单`都是不同的。


`fields`选项,允许您做的另一个有用的事情是`排除`（exclude）某些`字段`。
只需要把你不想要的的`字段`，`排除掉`即可。
如果您的`管理员用户`只能`被信任，去`编辑`您的数据的`某个部分`，或者您的`某些字段`被某些外部的`自动化流程`所更改，则可以使用此功能。

例如，在我们的图书数据库中，我们可以隐藏`publication_date`字段，让其不可以编辑：
----------------------------------------------------------
class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'publisher','publication_date')
    list_filter = ('publication_date',)
    date_hierarchy = 'publication_date'
    ordering = ('-publication_date',)
    fields = ('title', 'authors', 'publisher')
----------------------------------------------------------
因此，`图书`的`编辑表单`中，使得不可以指定`出版日期`。
例如，如果你是一位`编辑`，希望该`图书`的`作者`不能够推迟`出版日期`，这可能是有用的。 （当然这完全是一个假设的例子。）
当`用户`使用这个`不完整`的`表单`来添加一本新的`图书`时，`Django`会简单地将`publication_date`设置为`None`--所以请确保该字段具有`null = True`。

另一种常用的`编辑窗体`的自定义，是与`多对多`字段有关的。
正如我们在`书籍`的`编辑表格`中看到的，`管理站点`将每个`ManyToManyField`字段，使用一个`多选框`来显示，这是常见的`HTML`输入小部件，但`多选框`可能`很难`使用。
如果您想选择`多个`条目，则必须按住`控制键`(Ctrl键)或`Mac`上的`命令`（Command键）才能执行此操作。

`管理页面`有助于插入一些解释这一点的`文本`，但当您的字段包含`数百个`选项时，它仍然很难使用。

`管理页面`的解决方案是`filter_horizontal`。让我们将其添加到`BookAdmin`并查看它的`功能`。
----------------------------------------------------------
class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'publisher','publication_date')
    list_filter = ('publication_date',)
    date_hierarchy = 'publication_date'
    ordering = ('-publication_date',)
    filter_horizontal = ('authors',)
----------------------------------------------------------
（如果你正在遵循我们的步骤做，请注意，我也删除了`字段`选项以显示`编辑表单`中的`所有字段`。）
重新加载`Book`(`图书`)的`编辑表单`，您会看到`Author`(“作者”)部分，现在使用了花哨的`JavaScript``过滤器`界面，可让您动态地`搜索`选项，并将特定的`author`(`作者`)从“可用作者”移动到“已选作者”框，反之亦然（图5-13）。

我强烈推荐使用`filter_horizontal`来处理超过`10个`条目的任何`ManyToManyField`。
这比使用简单的`多选框部件`要容易得多。
另外，请注意，您可以对`多个字段`使用`filter_horizontal`  - 只需在`元组`中指定每个`名称`即可。

`ModelAdmin类`也支持`filter_vertical`选项。
这与`filter_horizontal`完全相同，但生成的`JavaScript界面`将这两个`框``垂直地`而不是`水平地`堆叠起来。
这是`个人品味`的问题。

`filter_horizontal`和`filter_vertical`仅适用于`ManyToManyField`字段，而不适用于`ForeignKey`字段。

默认情况下，`管理站点`对`ForeignKey`字段，使用简单的`<select>选择框`，
但对于`ManyToManyField`，有些时候，您不希望不得不在`下拉列表`中选择所有的相关的对象，因此而产生的`开销。
`filter_horizontal` and `filter_vertical` only work on `ManyToManyField` fields, not `ForeignKey` fields. 
By default, the admin site uses simple <select> boxes for `ForeignKey` fields,
 but, as for `ManyToManyField`, sometimes you don’t want to incur the overhead of having to select all the related objects to display in the drop-down.

For example, if our book database grows to include thousands of publishers, the “Add book” form could take a while to load, because it would have to load every publisher for display in the <select> box. 
The way to fix this is to use an option called raw_id_fields:
例如，如果我们的`图书数据库`增长到包含数千个`出版商`（publishers），则“添加图书”表单,可能需要一段时间来进行加载，因为它必须`加载`每个`出版商`才能显示在这个`<select>框`中。
解决这个问题的方法是,使用一个名为`raw_id_fields`的选项：

----------------------------------------------------------
class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'publisher','publication_date')
    list_filter = ('publication_date',)
    date_hierarchy = 'publication_date'
    ordering = ('-publication_date',)
    filter_horizontal = ('authors',)
    raw_id_fields = ('publisher',)
----------------------------------------------------------
Set this to a tuple of ForeignKey field names, and those fields will be displayed in the admin with a simple text input box (<input type="text">) instead of a <select>. See Figure 5-14.
将其设置为一个`ForeignKey``字段名称`的`元组`，这些`字段`将使用简单的`文本输入框`（<input type =“text”>）而不是`<select>`显示在`站点管理`界面中。见图5-14。

What do you enter in this input box? 
The database ID of the publisher. 
Given that humans don’t normally memorize database IDs,
there’s also a magnifying-glass icon that you can click to pull up a pop-up window, from which you can select the publisher to add.
那么你在这个`输入框`中输入什么内容？
`出版商`的数据库`ID`。
鉴于`人类`通常不会记住`数据库ID`，我们提供一个放大镜图标，你可以点击它，从而弹出一个窗口，从中你可以选择你想要添加的`出版商`(`publisher`)到里面。
======================================

